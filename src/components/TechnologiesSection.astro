---
import type { languageList } from '@/i18n/ui';
import { useTranslations } from '@/i18n/utils';
import { logoList } from '../logos';

const currentLang = Astro.currentLocale || 'en';
const translateLabels = useTranslations(currentLang as keyof typeof languageList);
---
<section id="technologies" class="py-24 bg-[#0a0a14]">
    <div class="container mx-auto">
        <h2 class="text-4xl font-bold mb-6 text-white font-serif text-center">
            {translateLabels("stack.h2", {
                label: <span class="text-[#e6c478]">{currentLang === 'en' ? 'Tech' : 'Stack'}</span>
            })}
        </h2>
        <p class="text-center text-zinc-300 mb-12 max-w-2xl mx-auto">{translateLabels("stack.desc")}</p>
        
        <div class="max-w-[800px] mx-auto scroll__container overflow-hidden ">
            <ul class="flex flex-row gap-6 py-2 flex-nowrap scroll__inner">
                {logoList.map((logo) => (
                    <li>
                        <logo.icon class="size-16" />
                    </li>
                ))}
            </ul>
        </div>

        <div class="mt-12 text-center">
            <div class="inline-flex items-center justify-center">
                <div class="h-px w-12 bg-[#e6c478]/30"></div>
                <p class="text-zinc-400 px-4">{translateLabels("stack.desc2")}</p>
                <div class="h-px w-12 bg-[#e6c478]/30"></div>
            </div>
        </div>

        <div class="max-w-2xl xs:w-fit mx-auto mt-16 mb-12 bg-[#0a0a14] border border-[#e6c478]/30 rounded-lg">
            <div class="bg-[#0f0f1a] px-4 py-2 border-b border-[#e6c478]/30 flex items-center">
                <div class="flex space-x-2">
                    <div class="w-3 h-3 rounded-full bg-[#e6c478]"></div>
                    <div class="w-3 h-3 rounded-full bg-[#e6c478]/60"></div>
                    <div class="w-3 h-3 rounded-full bg-[#e6c478]/30"></div>
                </div>
                <div class="ml-4 text-[#e6c478] text-sm font-mono">~dev</div>
            </div> 
        
            <div class="p-6 font-mono text-sm grid grid-cols-1 md:grid-cols-2 gap-8 place-items-center">
                <div class="text-[#e6c478] whitespace-pre leading-tight w-full flex justify-center">
                    {`
          /\\
         /  \\
        /    \\
       /      \\
      /   ''   \\
     /   |  |   \\
    /_-''    ''-_\\
                    `}
                </div>
                <div class="flex-1 text-zinc-300 w-full max-w-sm mx-auto">
                    <div class="grid grid-cols-1 gap-x-8 gap-y-2">
                        <div class="flex">
                            <span class="text-[#e6c478] w-36">OS</span>
                            <span>Omarchy</span>
                        </div>
                        <div class="flex">
                            <span class="text-[#e6c478] w-36">Shell</span>
                            <span>bash 5.2</span>
                        </div>
                        <div class="flex">
                            <span class="text-[#e6c478] w-36">Code Editor</span>
                            <span>VS Code</span>
                        </div>
                        <div class="flex">
                            <span class="text-[#e6c478] w-36">Package Manager</span>
                            <span>pnpm</span>
                        </div>
                        <div class="flex">
                            <span class="text-[#e6c478] w-36">Window Manager</span>
                            <span>Hyprland</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
</section>

<script>
    const scroll = document.querySelectorAll('.scroll__container');

    scroll.forEach(sc => {
        sc.setAttribute('data-animated', "true");

        const scrollInner = document.querySelector('.scroll__inner');

        if (scrollInner) {
            const scrollerContent = Array.from(scrollInner.children);
            
            scrollerContent.forEach(item => {
                const duplicate = item.cloneNode(true);
                scrollInner.appendChild(duplicate);
            })
        }


    })
</script>

<style>
    .scroll__container {
        -webkit-mask:
            linear-gradient(90deg, transparent, white 20%, white 80%, transparent);

        mask: linear-gradient(90deg, transparent, white 20%, white 80%, transparent);
    }
    
    .scroll__inner {
        width: max-content;
        animation: scrollAnimation 30s linear infinite;
    }

    @keyframes scrollAnimation {
        to {
            transform: translate(calc(-50% - 0.8rem));
        }
    }
</style>